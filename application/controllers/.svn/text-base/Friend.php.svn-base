<?php

/* * *************************************************************************
 * 
 * Copyright (c) 2012 active.com, Inc. All Rights Reserved
 * 
 * ************************************************************************ */

/**
 * 
 * @package	controllers
 * @author	scao(sid.cao@activenetwork.com)
 * @version	$Revision: 1.1 $
 */
class SetupController extends BasicController {

    public function step1Action() {
       
    }

    public function step2_1Action() {
        
    }

    public function step2_2Action() {
        $flag = intval($this->getRequest()->get('flag'));
        $processStatus = 0;
        $isUploaded = false;
        $isUploadedOptional = false;
        $isCompanyAccountCompleted = CompanyAccountModel::getInstance()->isAccountCompleted($_SESSION['user_id']);
        //handler upload file 
        if ($flag == 2) {
            $processStatus = $this->dealWithUpload($isCompanyAccountCompleted);
            if ($processStatus > 0) {
                RegisterModel::getInstance()->updateAccountStep($_SESSION['user_id'], 2);
                $isUploaded = true;
            }
        }
        //query carrier info
        $carrierInfo = CarrierModel::getInstance()->getCarrierList();
        $lincenseInfo = LicenseModel::getInstance()->getLincenseInfoByCompanyId($_SESSION['co_id']);
        if (!$lincenseInfo) {
            $lincense = 0;
        } else {
            $lincense = $lincenseInfo['license_level'];
        }

        $accountList = ChargeAccountModel::getInstance()->getAccountListByCid($_SESSION['co_id']);

        if ($isCompanyAccountCompleted) {
            $chargeAccountInfo = array();
        } else {
            $chargeAccountInfo = is_array($accountList) ? array_pop($accountList) : array();
        }
        $stepNum = RegisterModel::getInstance()->getStepnum($_SESSION['user_id']);
        if ($isCompanyAccountCompleted) {
            $backUrl = '/dashboard';
            $btnName = 'Cancel';
        } else {
            $backUrl = '/setup/step2_1';
            $btnName = 'Back';
        }
        if ($stepNum >= 2 && !$this->forAddNewAccount()) {
            $isUploadedOptional = true;
        }

        //get exchange rate
        $currency = CurrencyModel::getInstance()->getCurrencyList();
        $this->getView()->assign('currency', $currency);
        $this->getView()->assign('carrier_info', $carrierInfo);
        $this->getView()->assign('charge_account_info', $chargeAccountInfo);
        $this->getView()->assign('process_status', $processStatus);
        $this->getView()->assign('lincense', $lincense);
        $this->getView()->assign('tag', $flag);
        $this->getView()->assign('reg_step_num', $stepNum);
        $this->getView()->assign('is_uploaded', $isUploaded);
        $this->getView()->assign('is_uploaded_optional', $isUploadedOptional);
        $this->getView()->assign('is_upgrade', isset($_SESSION['is_upgrade']) ? $_SESSION['is_upgrade'] : 0);
        $this->getView()->assign('back_url', $backUrl);
        $this->getView()->assign('btn_name', $btnName);
    }

    public function step3Action() {
        $companyId = $_SESSION['co_id'];
        $isRequired = 1;
        $nameArr = SortItemModel::getInstance()->getItemName($companyId, $isRequired);
        if (!empty($nameArr)) {
            $this->getView()->assign('sortItemName', $nameArr[0]['sort_item_name']);
        }

        $itemName = $this->getRequest()->get('item_name');
        $chargeFieldInfo = ChargebackFieldModel::getInstance()->getChargeField(ChargebackFieldModel::CHARGEBACK_FILED_LEVEL_1, $_SESSION['co_id']);

        $chargeFieldInfo2 = ChargebackFieldModel::getInstance()->getChargeField(ChargebackFieldModel::CHARGEBACK_FILED_LEVEL_2, $_SESSION['co_id']);
        //query chargefield2 sort name
        $isRequiredSortname = 0;
        $sortNameArr = SortItemModel::getInstance()->getItemName($companyId, $isRequiredSortname);
        if (!empty($sortNameArr)) {
            $this->getView()->assign('sortItemName2', $sortNameArr[0]['sort_item_name']);
        }

        $lincenseInfo = LicenseModel::getInstance()->getLincenseInfoByCompanyId($_SESSION['co_id']);
        if (!$lincenseInfo) {
            $lincense = 0;
        } else {
            $lincense = $lincenseInfo['license_level'];
        }

        $this->getView()->assign('lincense', $lincense);
        $this->getView()->assign('item_name', $itemName);
        $this->getView()->assign('chargeFieldInfo', $chargeFieldInfo);
        $this->getView()->assign('chargeFieldInfo2', $chargeFieldInfo2);
    }

    public function step4Action() {
        $companyId = $_SESSION['co_id'];
        $requiredSortItemList = array();
        $optionalSortItemList = array();
        list($requiredSortItem, $optionalSortItem) = SortItemModel::getInstance()->getAssociateSortItemsByCompanyId($companyId);
        if ($requiredSortItem) {
            $requiredSortItemList = DepartmentModel::getInstance()->getDepartmentListByCompanyId($companyId);
        }
        if ($optionalSortItem) {
            $optionalSortItemList = MarketModel::getInstance()->getMarketListByCompanyId($companyId);
        }
        $deviceTypeList = DeviceTypeModel::getInstance()->getDeviceTypeListByCompanyId($companyId);
        $date = ChargeModel::getInstance()->getLatestDateByCompanyId($companyId);
        $companyUserAmount = ChargeModel::getInstance()->getChargeUserAmount($companyId);
        $companyCurrentMonthUserAmount = ChargeModel::getInstance()->getChargeUserAmount($companyId, $date);
        $setupUsersAmount = ChargeModel::getInstance()->getSetupUserAmount($companyId);
        $license = LicenseModel::getInstance()->getLincenseInfoByCompanyId($companyId);
        if (!$license) {
            $companyAllowedAmount = TRIAL_VERSION_USER_LIMIT > $companyUserAmount ? $companyUserAmount : TRIAL_VERSION_USER_LIMIT;
            $companyCurrentMonthUserAmount = TRIAL_VERSION_USER_LIMIT > $companyCurrentMonthUserAmount ? $companyCurrentMonthUserAmount : TRIAL_VERSION_USER_LIMIT;
        } else {
            $companyAllowedAmount = $companyUserAmount;
        }
        $this->getView()->assign('required_sort_item', $requiredSortItem);
        $this->getView()->assign('optional_sort_item', $optionalSortItem);
        $this->getView()->assign('department_list', $requiredSortItemList);
        $this->getView()->assign('market_list', $optionalSortItemList);
        $this->getView()->assign('device_type_list', $deviceTypeList);
        $this->getView()->assign('left_users_amount', intval($companyAllowedAmount - $setupUsersAmount));
        $this->getView()->assign('company_allowed_amount', $companyCurrentMonthUserAmount);
        $this->getView()->assign('company_user_amount', $companyUserAmount ? $companyUserAmount : 0);
    }

    public function step5Action() {
        $listChargebackEmail = ChargebackEmailModel::getInstance()->listComChargebackEmail($_SESSION['co_id']);
        $topValue = array(10, 20, 50, 100);
        $cominfo = CompanyinfoModel::getInstance()->getCompanyInfoByCid($_SESSION['co_id']);
        if (isset($cominfo['show_allocation']) && $cominfo['show_allocation'] != 0) {
            $allocation = $cominfo['show_allocation'];
        }
        if (isset($cominfo['show_top']) && $cominfo['show_top'] != 0) {
            $top = $cominfo['show_top'];
        }
        $useChargebackReport = isset($cominfo['use_chargeback_report']) ? $cominfo['use_chargeback_report'] : 0;
        $showAverage = isset($cominfo['show_average']) ? $cominfo['show_average'] : 0;

        $lincenseInfo = LicenseModel::getInstance()->getLincenseInfoByCompanyId($_SESSION['co_id']);
        if (!$lincenseInfo) {
            $lincense = 0;
        } else {
            $lincense = $lincenseInfo['license_level'];
        }

        $this->getView()->assign('lincense', $lincense);
        $this->getView()->assign('user_id', $_SESSION['user_id']);
        $this->getView()->assign('listChargebackEmail', $listChargebackEmail);
        $this->getView()->assign('allocation', isset($allocation) ? $allocation : 0);
        $this->getView()->assign('top', isset($top) ? $top : 0);
        $this->getView()->assign('use_chargeback_report', $useChargebackReport);
        $this->getView()->assign('show_average', $showAverage);
        $this->getView()->assign('top_value', $topValue);
    }

    private function dealWithUpload($isCompanyAccountCompleted) {
        //upload data file
        $result = FileModel::getInstance()->uploadRawData();

        if (!$result) {
            $processStatus = -1;
            throw new Exception('Can not import charge data');
        } else {
            $filename = $result;
            $carrierId = intval($this->getRequest()->get('carrier_id'));
            $accountDesc = strip_tags($this->getRequest()->get('account_desc'));
            $accountCutOffDate = CHARGE_CUTOFF_DAY;
            $currencyId = intval($this->getRequest()->get('currency_id'));

            if (!$isCompanyAccountCompleted) {
                $retReplaceAccount = ChargeAccountModel::getInstance()->batchReplaceChargeAccountByRawData($filename, $carrierId, $accountDesc, $accountCutOffDate, $currencyId);
            } else {
                $retReplaceAccount = ChargeAccountModel::getInstance()->batchCreateChargeAccountByRawData($filename, $carrierId, $accountDesc, $accountCutOffDate, $currencyId);
            }

            if (!$retReplaceAccount || $retReplaceAccount < 0) {
                $processStatus = -1;
                if ($retReplaceAccount == -5 || $retReplaceAccount == -2) {
                    $processStatus = $retReplaceAccount;
                }
                Util_CLog::warning('Can not replace charge account');
            } else {
                $ret = FileModel::getInstance()->processUpload($filename, $carrierId, $accountCutOffDate);
                if ($ret < 0) {
                    $processStatus = $ret;
                    Util_CLog::warning('Can not import charge data');
                } else {
                    $processStatus = 1;
                }
            }
        }
        $this->getView()->assign('filename', strip_tags($this->getRequest()->get('viewfile')));
        $this->getView()->assign('carrier_name', CarrierModel::$carrierIdToName[$carrierId]);
        return $processStatus;
    }

    private function forAddNewAccount() {
        if (isset($_SERVER['HTTP_REFERER'])) {
            $refererUrlInfo = parse_url($_SERVER['HTTP_REFERER']);
        }
        if (isset($refererUrlInfo['path']) && ($refererUrlInfo['path'] == '/dashboard/'
                || $refererUrlInfo['path'] == '/dashboard' || $refererUrlInfo['path'] == '/dashboard/index')) {
            return true;
        }
        return false;
    }

}

/* vim: set ts=4 sw=4 sts=4 tw=100 noet: */
?>